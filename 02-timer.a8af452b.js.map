{"mappings":"0iBACAA,OAAOC,eAAeC,EAAS,aAAc,CACzCC,OAAO,IAEXD,EAAQE,QACR,SAAyBC,EAAUC,GAC/B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,UAAU,sC,SCG5B,SAASC,EAAkBC,EAAQC,GAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAI,CACjC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDhB,OAAOC,eAAeQ,EAAQI,EAAWI,IAAKJ,IAftDb,OAAOC,eAAeiB,EAAS,aAAc,CACzCf,OAAO,IAEXe,EAAQd,QACR,SAAsBE,EAAaa,EAAYC,GACvCD,GAAYX,EAAkBF,EAAYe,UAAWF,GACrDC,GAAaZ,EAAkBF,EAAac,GAChD,OAAOd,G,8BCmGLgB,EAAO,CACbC,MAAOC,SAASC,cAAc,oBAC9BC,SAAUF,SAASC,cAAc,gBAEjCE,KAAMH,SAASC,cAAc,eAC7BG,MAAOJ,SAASC,cAAc,gBAC9BI,QAASL,SAASC,cAAc,kBAChCK,QAASN,SAASC,cAAc,mBAGhCH,EAAKI,SAASK,UAAW,EACzB,IAAIC,EAAU,KAkBd,SAASC,EAAI9B,GACX,OAAO+B,OAAO/B,GAAOgC,SAAS,EAAG,KAEnC,IAAMC,EAAU,CACZC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EACjBC,QAAA,SAAQC,GACHA,EAAc,IAAMH,KAAKI,MAC3BC,EAAAC,OAAOC,QAAQ,uCAEdzB,EAAKI,SAASK,UAAW,EACzBC,EAAUW,EAAc,OAMhC,EAAAK,EAAA5C,SAAUkB,EAAKC,MAAOa,GAEtB,IAkCMa,EAAQ,IAAZ,W,sBAlCIC,I,aAGJC,KAAKC,WAAa,KAClB9B,EAAKI,SAASK,UAAW,E,gBAG3Bd,IAAA,Q,MAAA,W,WACKK,EAAKI,SAASK,UAAW,EACzBT,EAAKC,MAAMQ,UAAW,EACtBoB,KAAKC,WAAaC,aAAY,WAE7B,IAAMC,EAAYd,KAAKI,MACjBW,EAAYvB,EAAUsB,EACtBE,EAnDZ,SAAmBA,GAEjB,IACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EASZ,MAAO,CAAEhC,KAPIkC,KAAKC,MAAMN,EAAKI,GAOdhC,MALDiC,KAAKC,MAAMN,EAAMI,EAAOD,GAKhB9B,QAHNgC,KAAKC,MAAMN,EAAOI,EAAOD,EAAQF,GAGlB3B,QADf+B,KAAKC,MAAMN,EAAQI,EAAOD,EAAQF,EAXnC,MAiDAM,CAAUR,GAEnBA,GAAa,KACfS,cAAcC,EAAKb,YAGpBa,EAAKC,gBAAgBV,KAEjB,O,CAGPvC,IAAA,kB,MAAA,SAAiBkD,G,IAAExC,EAAFwC,EAAExC,KAAMC,EAARuC,EAAQvC,MAAOC,EAAfsC,EAAetC,QAASC,EAAxBqC,EAAwBrC,QAEvCR,EAAKK,KAAKyC,YAAcnC,EAAIN,GAC5BL,EAAKM,MAAMwC,YAAcnC,EAAIL,GAC7BN,EAAKO,QAAQuC,YAAcnC,EAAIJ,GAC/BP,EAAKQ,QAAQsC,YAAcnC,EAAIH,O,EAIjC,IACFR,EAAKI,SAAS2C,iBAAiB,SAAS,W,OAAMpB,EAAMqB,W","sources":["node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/02-timer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","// import Notiflix from 'notiflix';\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// import flatpickr from 'flatpickr';\n// import 'flatpickr/dist/flatpickr.min.css';\n\n// function convertMs(ms) {\n//   // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   // Remaining days\n//   const days = Math.floor(ms / day);\n//   // Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n//   // Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   // Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n// const date = new Date();\n// const input = document.querySelector('#datetime-picker');\n// const start = document.querySelector('button');\n// const dataDays = document.querySelector('[data-days]');\n// const dataHours = document.querySelector('[data-hours]');\n// const dataMinutes = document.querySelector('[data-minutes]');\n// const dataSeconds = document.querySelector('[data-seconds]');\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     if (selectDate.selectedDates[0] > date) {\n//       start.disabled = false;\n//     } else {\n//       start.disabled = true;\n//       Notiflix.Notify.failure(\n//         'Вибраний час вже в минулому. Введіть дату з майбутнього!',\n//         { position: 'center-center', backoverlay: true }\n//       );\n//     }\n//   },\n// };\n\n// const selectDate = flatpickr(input, options);\n// const timer = {\n//   intervalId: null,\n//   isActive: false,\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n//     this.isActive = true;\n\n//     this.intervalId = setInterval(() => {\n//       const reverseTime = Date.parse(selectDate.selectedDates[0]) - Date.now();\n\n//       if (reverseTime > 0) {\n//         const { days, hours, minutes, seconds } = convertMs(reverseTime);\n\n//         dataHours.textContent = `${hours}`;\n//         dataDays.textContent = `${days}`;\n//         dataMinutes.textContent = `${minutes}`;\n//         dataSeconds.textContent = `${seconds}`;\n//       } else {\n//         window.alert('The time is up');\n//         window.location.reload();\n//         clearInterval(this.intervalId);\n//       }\n//     }, 1000);\n//   },\n// };\n\n// start.setAttribute('disabled', true);\n// start.addEventListener('click', onStartBtn);\n\n// function onStartBtn() {\n//   start.setAttribute('disabled', true);\n//   input.setAttribute('disabled', true);\n//   timer.start();\n// }\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n\n// Описаний в документації\nimport flatpickr from \"flatpickr\";\n//import Notiflix from \"notiflix\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n// Додатковий імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\n\n\nconst refs = {\ninput: document.querySelector('#datetime-picker'),\nstartBtn: document.querySelector('[data-start]'),\n\ndays: document.querySelector('[data-days]'),\nhours: document.querySelector('[data-hours]'),\nminutes: document.querySelector('[data-minutes]'),\nseconds: document.querySelector('[data-seconds]')\n};\n\nrefs.startBtn.disabled = true;\nlet endTime = null;\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\nfunction pad(value){\n  return String(value).padStart(2, '0');\n}\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      if(selectedDates[0] <= Date.now()) {\n       Notify.failure('Please choose a date in the future');\n      }  else {\n        refs.startBtn.disabled = false;\n        endTime = selectedDates[0];\n        \n      }\n   },\n  };\n\nflatpickr(refs.input, options);\n\nclass Timer {\n\nconstructor() {\n  this.intervalId = null;\n  refs.startBtn.disabled = true;\n}\n\nstart() {\n     refs.startBtn.disabled = true;\n     refs.input.disabled = true;\n     this.intervalId = setInterval(() => {\n    \n      const startTime = Date.now();\n      const deltaTime = endTime - startTime;\n      const ms = convertMs(deltaTime);\n\n     if(deltaTime <= 1000){\n      clearInterval(this.intervalId);\n     }\n\n     this.updateClockface(ms);\n     \n      }, 1000);\n  }\n \n  updateClockface ({ days, hours, minutes, seconds }) {\n\n    refs.days.textContent = pad(days);\n    refs.hours.textContent = pad(hours);\n    refs.minutes.textContent = pad(minutes);\n    refs.seconds.textContent = pad(seconds);\n    }\n};\n\nconst timer = new Timer();\nrefs.startBtn.addEventListener('click', () => timer.start());"],"names":["Object","defineProperty","$665014edacbfe17b$exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","$74e7f8130373505f$exports","protoProps","staticProps","prototype","$84b9dae4df53835d$var$refs","input","document","querySelector","startBtn","days","hours","minutes","seconds","disabled","$84b9dae4df53835d$var$endTime","$84b9dae4df53835d$var$pad","String","padStart","$84b9dae4df53835d$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","now","$h6c0i","Notify","failure","$dbdyf","$84b9dae4df53835d$var$timer","Timer","this","intervalId","setInterval","startTime","deltaTime","ms","minute","second","hour","day","Math","floor","$84b9dae4df53835d$var$convertMs","clearInterval","_this","updateClockface","param","textContent","addEventListener","start"],"version":3,"file":"02-timer.a8af452b.js.map"}